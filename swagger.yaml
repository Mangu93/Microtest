swagger: '2.0'
info:
    description: microtest API documentation
    version: "0.1"
    title: microtest API
    contact:
        email: "adrianmarinportillo@gmail.com"
    license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: '127.0.1.1:8080'
basePath: /
tags:
    - name: account-resource
      description: Account Resource
    - name: content-resource
      description: Content Resource
    - name: user-jwt-controller
      description: User JWT Controller
    - name: user-resource
      description: User Resource
paths:
    /api/account:
        get:
            tags:
                - account-resource
            summary: getAccount
            operationId: getAccountUsingGET
            produces:
                - '*/*'
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/UserDTO'
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        post:
            tags:
                - account-resource
            summary: saveAccount
            operationId: saveAccountUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: userDTO
                  description: userDTO
                  required: true
                  schema:
                      $ref: '#/definitions/UserDTO'
            responses:
                '200':
                    description: OK
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        delete:
            tags:
                - account-resource
            summary: deleteAccount
            operationId: deleteAccountUsingDELETE
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: loginVM
                  description: loginVM
                  required: true
                  schema:
                      $ref: '#/definitions/LoginVM'
            responses:
                '200':
                    description: OK
                '204':
                    description: No Content
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
            deprecated: false
    /api/account/change-password:
        post:
            tags:
                - account-resource
            summary: changePassword
            operationId: changePasswordUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: passwordChangeDto
                  description: passwordChangeDto
                  required: true
                  schema:
                      $ref: '#/definitions/PasswordChangeDTO'
            responses:
                '200':
                    description: OK
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/account/reset-password/finish:
        post:
            tags:
                - account-resource
            summary: finishPasswordReset
            operationId: finishPasswordResetUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: keyAndPassword
                  description: keyAndPassword
                  required: true
                  schema:
                      $ref: '#/definitions/KeyAndPasswordVM'
            responses:
                '200':
                    description: OK
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/account/reset-password/init:
        post:
            tags:
                - account-resource
            summary: requestPasswordReset
            operationId: requestPasswordResetUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: mail
                  description: mail
                  required: true
                  schema:
                      type: string
            responses:
                '200':
                    description: OK
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/authenticate:
        get:
            tags:
                - account-resource
            summary: isAuthenticated
            operationId: isAuthenticatedUsingGET
            produces:
                - '*/*'
            responses:
                '200':
                    description: OK
                    schema:
                        type: string
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        post:
            tags:
                - user-jwt-controller
            summary: authorize
            operationId: authorizeUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: loginVM
                  description: loginVM
                  required: true
                  schema:
                      $ref: '#/definitions/LoginVM'
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/JWTToken'
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/contents:
        get:
            tags:
                - content-resource
            summary: getAllContents
            operationId: getAllContentsUsingGET
            produces:
                - '*/*'
            responses:
                '200':
                    description: OK
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Contents'
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        post:
            tags:
                - content-resource
            summary: createContent
            operationId: createContentUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: contents
                  description: contents
                  required: true
                  schema:
                      $ref: '#/definitions/Contents'
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/Contents'
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        put:
            tags:
                - content-resource
            summary: updateContent
            operationId: updateContentUsingPUT
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: contents
                  description: contents
                  required: true
                  schema:
                      $ref: '#/definitions/Contents'
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/Contents'
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    '/api/contents/{id}':
        get:
            tags:
                - content-resource
            summary: getContent
            operationId: getContentUsingGET
            produces:
                - '*/*'
            parameters:
                - name: id
                  in: path
                  description: id
                  required: true
                  type: integer
                  format: int64
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/Contents'
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        delete:
            tags:
                - content-resource
            summary: deleteContent
            operationId: deleteContentUsingDELETE
            produces:
                - '*/*'
            parameters:
                - name: id
                  in: path
                  description: id
                  required: true
                  type: integer
                  format: int64
            responses:
                '200':
                    description: OK
                '204':
                    description: No Content
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
            deprecated: false
    /api/register:
        post:
            tags:
                - account-resource
            summary: registerAccount
            operationId: registerAccountUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: managedUserVM
                  description: managedUserVM
                  required: true
                  schema:
                      $ref: '#/definitions/ManagedUserVM'
            responses:
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/register-service:
        post:
            tags:
                - account-resource
            summary: registerService
            operationId: registerServiceUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: managedUserVM
                  description: managedUserVM
                  required: true
                  schema:
                      $ref: '#/definitions/ManagedUserVM'
            responses:
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/service:
        post:
            tags:
                - account-resource
            summary: saveService
            operationId: saveServiceUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: managedUserVM
                  description: managedUserVM
                  required: true
                  schema:
                      $ref: '#/definitions/ManagedUserVM'
            responses:
                '200':
                    description: OK
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        delete:
            tags:
                - account-resource
            summary: deleteService
            operationId: deleteServiceUsingDELETE
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: loginVM
                  description: loginVM
                  required: true
                  schema:
                      $ref: '#/definitions/LoginVM'
            responses:
                '200':
                    description: OK
                '204':
                    description: No Content
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
            deprecated: false
    /api/users:
        get:
            tags:
                - user-resource
            summary: getAllUsers
            operationId: getAllUsersUsingGET
            produces:
                - '*/*'
            parameters:
                - name: page
                  in: query
                  description: Page number of the requested page
                  required: false
                  type: integer
                  format: int32
                - name: queryParams
                  in: query
                  description: queryParams
                  required: true
                  items:
                      type: object
                      additionalProperties:
                          type: string
                - name: size
                  in: query
                  description: Size of a page
                  required: false
                  type: integer
                  format: int32
                - name: sort
                  in: query
                  description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
                  required: false
                  type: array
                  items:
                      type: string
                  collectionFormat: multi
            responses:
                '200':
                    description: OK
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/UserDTO'
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        post:
            tags:
                - user-resource
            summary: createUser
            operationId: createUserUsingPOST
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: userDTO
                  description: userDTO
                  required: true
                  schema:
                      $ref: '#/definitions/UserDTO'
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/User'
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        put:
            tags:
                - user-resource
            summary: updateUser
            operationId: updateUserUsingPUT
            consumes:
                - application/json
            produces:
                - '*/*'
            parameters:
                - in: body
                  name: userDTO
                  description: userDTO
                  required: true
                  schema:
                      $ref: '#/definitions/UserDTO'
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/UserDTO'
                '201':
                    description: Created
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    /api/users/authorities:
        get:
            tags:
                - user-resource
            summary: getAuthorities
            operationId: getAuthoritiesUsingGET
            produces:
                - '*/*'
            responses:
                '200':
                    description: OK
                    schema:
                        type: array
                        items:
                            type: string
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
    '/api/users/{login}':
        get:
            tags:
                - user-resource
            summary: getUser
            operationId: getUserUsingGET
            produces:
                - '*/*'
            parameters:
                - name: login
                  in: path
                  description: login
                  required: true
                  type: string
            responses:
                '200':
                    description: OK
                    schema:
                        $ref: '#/definitions/UserDTO'
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '404':
                    description: Not Found
            deprecated: false
        delete:
            tags:
                - user-resource
            summary: deleteUser
            operationId: deleteUserUsingDELETE
            produces:
                - '*/*'
            parameters:
                - name: login
                  in: path
                  description: login
                  required: true
                  type: string
            responses:
                '200':
                    description: OK
                '204':
                    description: No Content
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
            deprecated: false
definitions:
    Contents:
        type: object
        required:
            - createdAt
            - value
        properties:
            createdAt:
                type: string
                format: date-time
            id:
                type: integer
                format: int64
            userBelongsTo:
                $ref: '#/definitions/User'
            value:
                type: string
        title: Contents
    JWTToken:
        type: object
        properties:
            id_token:
                type: string
        title: JWTToken
    KeyAndPasswordVM:
        type: object
        properties:
            key:
                type: string
            newPassword:
                type: string
        title: KeyAndPasswordVM
    LoginVM:
        type: object
        required:
            - password
            - username
        properties:
            password:
                type: string
                minLength: 4
                maxLength: 100
            rememberMe:
                type: boolean
            username:
                type: string
                minLength: 1
                maxLength: 50
        title: LoginVM
    ManagedUserVM:
        type: object
        properties:
            activated:
                type: boolean
            authorities:
                type: array
                items:
                    type: string
            createdBy:
                type: string
            createdDate:
                type: string
                format: date-time
            email:
                type: string
                minLength: 5
                maxLength: 254
            firstName:
                type: string
                minLength: 0
                maxLength: 50
            id:
                type: integer
                format: int64
            imageUrl:
                type: string
                minLength: 0
                maxLength: 256
            langKey:
                type: string
                minLength: 2
                maxLength: 6
            lastModifiedBy:
                type: string
            lastModifiedDate:
                type: string
                format: date-time
            lastName:
                type: string
                minLength: 0
                maxLength: 50
            login:
                type: string
                minLength: 1
                maxLength: 50
                pattern: '^[_.@A-Za-z0-9-]*$'
            password:
                type: string
                minLength: 4
                maxLength: 100
        title: ManagedUserVM
    PasswordChangeDTO:
        type: object
        properties:
            currentPassword:
                type: string
            newPassword:
                type: string
        title: PasswordChangeDTO
    User:
        type: object
        required:
            - activated
            - login
            - password
        properties:
            activated:
                type: boolean
            contents:
                type: array
                items:
                    $ref: '#/definitions/Contents'
            email:
                type: string
                minLength: 5
                maxLength: 254
            firstName:
                type: string
                minLength: 0
                maxLength: 50
            id:
                type: integer
                format: int64
            imageUrl:
                type: string
                minLength: 0
                maxLength: 256
            langKey:
                type: string
                minLength: 2
                maxLength: 6
            lastName:
                type: string
                minLength: 0
                maxLength: 50
            login:
                type: string
                minLength: 1
                maxLength: 50
                pattern: '^[_.@A-Za-z0-9-]*$'
            password:
                type: string
                minLength: 60
                maxLength: 60
            resetDate:
                type: string
                format: date-time
            service:
                type: boolean
        title: User
    UserDTO:
        type: object
        properties:
            activated:
                type: boolean
            authorities:
                type: array
                items:
                    type: string
            createdBy:
                type: string
            createdDate:
                type: string
                format: date-time
            email:
                type: string
                minLength: 5
                maxLength: 254
            firstName:
                type: string
                minLength: 0
                maxLength: 50
            id:
                type: integer
                format: int64
            imageUrl:
                type: string
                minLength: 0
                maxLength: 256
            langKey:
                type: string
                minLength: 2
                maxLength: 6
            lastModifiedBy:
                type: string
            lastModifiedDate:
                type: string
                format: date-time
            lastName:
                type: string
                minLength: 0
                maxLength: 50
            login:
                type: string
                minLength: 1
                maxLength: 50
                pattern: '^[_.@A-Za-z0-9-]*$'
        title: UserDTO
